<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.slam.mapper.book.CommentMapper">

    <select id="findTotalCount" resultType="Integer">
        SELECT /* commentMapper.findTotalCount */
               COUNT(*)
          FROM COMMENTS
         WHERE BOOK_ID = #{bookId}
          <if test="paginator.searchText != null and paginator.searchText != ''">
           AND LOWER(COMMENT) LIKE CONCAT(CONCAT('%', #{searchText}), '%')
          </if>
          <if test="paginator.username != null and paginator.username != ''">
           AND CREATED_BY = #{username}
          </if>
    </select>

    <resultMap id="getCommentsByBookId" type="comment">
        <result column="BOOK_ID" property="bookId"/>
        <result column="ID" property="id"/>
        <result column="DEPTH" property="depth"/>
        <result column="COMMENT" property="comment"/>
        <result column="CREATED_BY" property="createdBy"/>
        <result column="CREATED_AT" property="createdAt"/>
    </resultMap>
    <select id="findCommentsByBookId" resultMap="getCommentsByBookId">
        SELECT /* commentMapper.findCommentsByBookId */
               c2.*
          FROM COMMENTS c1
     LEFT JOIN COMMENTS c2
            ON c1.BOOK_ID = c2.BOOK_ID
           AND c1.ID = c2.PARENT_ID
         WHERE c1.BOOK_ID = #{bookId}
           AND c2.ID IS NOT NULL
      ORDER BY c1.PARENT_ID DESC, c2.GROUP_ORDER ASC
         LIMIT #{paginator.jumpCount}, #{paginator.selectCount}
    </select>

    <update id="updateGroupOrder">
        UPDATE COMMENTS /* commentMapper.updateGroupOrder */
           SET GROUP_ORDER = GROUP_ORDER + 1
         WHERE BOOK_ID = #{bookId}
           AND PARENT_ID = #{parentId}
           AND GROUP_ORDER >= #{groupOrder}
    </update>

    <insert id="insertComment">
        INSERT INTO COMMENTS /* commentMapper.insertComment */
                    (
                    ID
                    , BOOK_ID
                    , PARENT_ID
                    , GROUP_ORDER
                    , DEPTH
                    , COMMENT
                    , CREATED_BY
                    )
             VALUES
                    (
                    (SELECT COALESCE(
                      (SELECT ID FROM (SELECT MAX(ID) + 1 AS ID FROM COMMENTS WHERE BOOK_ID = #{bookId}) AS TEMP)
                      , 1))
                    , #{bookId}
                    <choose>
                        <when test="parentId == null or parentId == 0">
                            , (SELECT COALESCE(
                                (SELECT ID FROM (SELECT MAX(ID) + 1 AS ID FROM COMMENTS WHERE BOOK_ID = #{bookId}) AS TEMP)
                                , 1))
                            , 0
                        </when>
                        <otherwise>
                            , #{parentId}
                            , #{groupOrder}
                        </otherwise>
                    </choose>
                    , #{depth}
                    , #{comment}
                    , #{createdBy}
                    )
    </insert>

</mapper>